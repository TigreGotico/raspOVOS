#!/bin/bash
# /usr/libexec/autoconfigure-soundcard
# This script automatically configures the default soundcard based on the detected devices.
# Runs after ovos-i2csound and when a USB soundcard is connected/removed.

# Constants
OVOS_USER="$(getent passwd 1000 | cut -d: -f1)"
SOUND_SERVER="pipewire"  # TODO: Add support for pulseaudio

# Card names
MK1_CARD_NAME="snd_rpi_proto"  # Mark 1 soundcard
HDMI_CARD_NAME="vc4-hdmi"       # HDMI soundcard
HEADPHONES_CARD_NAME="bcm2835"  # Onboard soundcard, not available on rpi5

# Environment variables for PipeWire (or PulseAudio)
export PULSE_RUNTIME_PATH="/run/user/1000/pulse/"
export XDG_RUNTIME_DIR="/run/user/1000/"

# Enable strict error handling
set -euo pipefail

# Function to handle errors
# Logs an error message and exits the script.
# Args:
#   $1: Line number where the error occurred
#   $2: Error code
error_handler() {
    local line_no=$1
    local error_code=$2
    log_message "Error (code: ${error_code}) occurred on line ${line_no}"
    exit ${error_code}
}

trap 'error_handler ${LINENO} $?' ERR

# Function to log messages to the console and a log file
# Args:
#   $1: Message to log
log_message() {
    echo "$1"
    echo "$(date) - $1" >> /tmp/autosoundcard.log
}

# Function to check if the script is running as root
is_root() {
    [ "$(id -u)" -eq 0 ]
}

# Function to set ALSA defaults for a given card number
# Updates ~/.asoundrc and sets default pipewire/pulseaudio sink.
# Args:
#   $1: The card number to set as default
set_alsa_defaults() {
    local card_number=$1

    log_message "Configuring ALSA for PipeWire at '/home/$OVOS_USER/.asoundrc'"
    echo -e "pcm.!default $SOUND_SERVER\nctl.!default $SOUND_SERVER" > "/home/$OVOS_USER/.asoundrc"

    local sink_name
    sink_name=$(get_sink_name_from_card "$card_number")
    # If sink name is found, set it as the default using pactl
    if [ "$sink_name" != "Card index not found" ]; then
        log_message "Setting default sink to: $sink_name"
        # Use pactl to set the default sink for PipeWire (or PulseAudio)
        if is_root; then
            runuser -u "$OVOS_USER" -- pactl set-default-sink "$sink_name"
        else
            pactl set-default-sink "$sink_name"
        fi
        log_message "Default sink set to: $sink_name"
    else
        log_message "Failed to map card number to output sink. Unable to set default sink."
    fi
}

# Function to get the card number associated with a given sink name
# Arguments:
#   $1 - Sink name to search for
# Returns:
#   The card number associated with the sink name
get_card_from_sink() {
    local search="$1"
    if is_root; then
        runuser -u "$OVOS_USER" -- pactl list sinks | awk -v search="$search" '
            BEGIN {found = 0}
            /Name: / {
                if (index($2, search) > 0) {found = 1}
                else {found = 0}
            }
            found && /api.alsa.card/ {card=$3}
            END {gsub(/"/, "", card); print card}'
    else
        pactl list sinks | awk -v search="$search" '
            BEGIN {found = 0}
            /Name: / {
                if (index($2, search) > 0) {found = 1}
                else {found = 0}
            }
            found && /api.alsa.card/ {card=$3}
            END {gsub(/"/, "", card); print card}'
    fi
}

# Function to get the sink name associated with a given card index
# Args:
#   $1: The card index to search for
# Returns:
#   The sink name associated with the card index or an error message if not found
get_sink_name_from_card() {
    local card_index="$1"
    if is_root; then
        runuser -u "$OVOS_USER" -- pactl list sinks | awk -v card_index="$card_index" '
          BEGIN {found = 0}
          /Name: / { name = $2 }
          /api.alsa.card/ {
              gsub(/"/, "", $3)
              if ($3 == card_index) {
                  print name
                  found = 1
              }
          }
          END { if (found == 0) { print "Card index not found" } }'
    else
        pactl list sinks | awk -v card_index="$card_index" '
          BEGIN {found = 0}
          /Name: / { name = $2 }
          /api.alsa.card/ {
              gsub(/"/, "", $3)
              if ($3 == card_index) {
                  print name
                  found = 1
              }
          }
          END { if (found == 0) { print "Card index not found" } }'
    fi
}

# Wait for ovos-i2csound to complete setup
sleep 1

# Read platform information
if [ -f /etc/OpenVoiceOS/i2c_platform ]; then
    i2c_platform=$(cat /etc/OpenVoiceOS/i2c_platform)
else
    log_message "/etc/OpenVoiceOS/i2c_platform not found."
    i2c_platform=""
fi

log_message "$(aplay -l)"  # Log detected soundcards

# Handle Mark 1-specific warnings
if echo "$i2c_platform" | grep -q "WM8960"; then
    # If it's a Mark 1 device, check for arduino boot failure symptoms
    # WM8960 is wrongly detected by ovos-i2csound if mk1 fails to load
    log_message "WARNING [Mark1 only]: If this is a Mark 1 device, Arduino may not have booted properly. Power cycle your device until the eyes spin."
fi

# Autoconfigure default soundcard
if echo "$i2c_platform" | grep -q "MARK1"; then
    # If it's a Mark 1 device, configure the Mark 1 soundcard
    log_message "Mark 1 soundcard detected by ovos-i2csound."
    if aplay -l | grep "$MK1_CARD_NAME"; then
        CARD_NUMBER=$(aplay -l | grep "$MK1_CARD_NAME" | awk '{print $2}' | cut -d':' -f1)
        log_message "Detected CARD_NUMBER for Mark 1 soundcard: $CARD_NUMBER"
        set_alsa_defaults "$CARD_NUMBER"
    else
        log_message "Error: ovos-i2csound detected Mark 1 but 'aplay -l' could not detect '$MK1_CARD_NAME'"
        exit 1
    fi
else
    # Check for USB soundcard
    if aplay -l | grep "card" | grep -i "usb"; then
        USB_CARDS=$(aplay -l | grep "card" | grep -i "usb" | awk '{print $2}' | cut -d':' -f1)
        if [ -n "$USB_CARDS" ]; then
            # If multiple USB soundcards are detected, log a warning and pick the last one
            CARD_COUNT=$(echo "$USB_CARDS" | wc -l)
            if [ "$CARD_COUNT" -gt 1 ]; then
                log_message "Warning: Multiple USB soundcards detected. Using the last detected card."
            fi
            # Select the last USB soundcard detected
            USB_CARD=$(echo "$USB_CARDS" | tail -n 1)
        else
            USB_CARD=""
        fi
    else
        USB_CARD=""
    fi

    if [ -n "$USB_CARD" ]; then
        # Set ALSA defaults for the detected USB soundcard
        log_message "USB soundcard detected."
        set_alsa_defaults "$USB_CARD"
    else
        # Check for any other non-BCM soundcard (prioritize user-installed cards over onboard ones)
        OTHER_CARD=$(aplay -l | grep "card"  | grep -v -i "$HEADPHONES_CARD_NAME" | grep -v -i "$HDMI_CARD_NAME" | awk '{print $2}' | cut -d':' -f1 | head -n 1)
        if [ -n "$OTHER_CARD" ]; then
            # Set ALSA defaults for the user-installed soundcard
            log_message "User-installed soundcard detected."
            set_alsa_defaults "$OTHER_CARD"
        else
            # Default to onboard BCM soundcard if no other card is found
            BCM_CARD=$(aplay -l | grep "card" | grep -i "$HEADPHONES_CARD_NAME" | awk '{print $2}' | cut -d':' -f1 | head -n 1)
            if [ -n "$BCM_CARD" ]; then
                # Set ALSA defaults for the onboard BCM soundcard
                log_message "Onboard BCM soundcard detected."
                set_alsa_defaults "$BCM_CARD"
            else
                # Fall back to HDMI soundcard if no onboard card is found
                HDMI_CARD=$(aplay -l | grep "card" | grep -i "$HDMI_CARD_NAME" | awk '{print $2}' | cut -d':' -f1 | head -n 1)
                if [ -n "$HDMI_CARD" ]; then
                    # Set ALSA defaults for the HDMI soundcard
                    log_message "HDMI soundcard detected."
                    set_alsa_defaults "$HDMI_CARD"
                else
                    # No suitable soundcard detected, log an error
                    log_message "Error: No suitable soundcard detected."
                fi
            fi
        fi
    fi
fi

